local hitbox = {
	Object = script:FindFirstChild("Hitbox"),
	Characters = {},
}

local playersService = game:GetService("Players")
local serverStorage = game:GetService("ServerStorage")
local aeKick = require(serverStorage.Modules.AEKick)
local touched = require(serverStorage.Modules.Touched)
local invincibility = game:GetService("ReplicatedStorage").Mutators.Invincibility

function hitbox.new(character)
	local hrp = character:FindFirstChild("HumanoidRootPart") or character:WaitForChild("HumanoidRootPart")
	local hitboxObj = hitbox.Object:Clone()
	
	hitboxObj:SetPrimaryPartCFrame(hrp.CFrame - Vector3.new(0, 0.5, 0))
	hitboxObj.CharacterWeld.Part0 = hrp
	hitboxObj.CharacterWeld.Part1 = hitboxObj.PrimaryPart

	hitboxObj.Parent = character
	
	return setmetatable({
		Player = playersService:GetPlayerFromCharacter(character),
		Character = character,
		Hitbox = hitboxObj,
		
		_Connections = {}
	}, { __index = hitbox })
end

function hitbox:Init()
	local function kick(msg)
		local plr = self.Player
		aeKick{ Player = plr, Exploit = msg }
		self:Destroy()
	end
	
	local function destroy()
		if not self.Player.Character or not self.Character:IsDescendantOf(game)
			or not self.Character:FindFirstChild("Humanoid") or self.Character.Humanoid.Health == 0
		then self:Destroy() return true end
	end
		
	self._Connections.Removed = self.Hitbox.AncestryChanged:Connect(function()
		if self.Hitbox:IsDescendantOf(game) then return end
		if destroy() then return end
		return kick("Illegal Hitbox deletion")
	end)
	
	self._Connections.DescendantRemoved = self.Hitbox.DescendantRemoving:Connect(function(descendant)
		if descendant:IsA("WeldConstraint") or descendant:IsA("TouchTransmitter") then return end
		if destroy() then return end
		self._Connections.Removed:Disconnect()
		kick("Illegal Hitbox descendant deletion [" .. tostring(descendant) .. "]")
	end)
	
	self._Connections.Touched = touched.new(self.Hitbox.PrimaryPart):Connect(function(hit)
		if not self.Character or not self.Character:FindFirstChild("Humanoid") then return end
		if not hit or not hit:IsDescendantOf(workspace.Tower) then return end
		
		if hit.Parent:IsA("Model") and hit.Parent.Name == "Bottom" and hit.Name == "KillPart" then
			self.Character.Humanoid.Health = 0
			return
		end
		
		if not hit.Parent:IsA("Folder") or hit.Parent.Name ~= "Killbricks" then return end
		if invincibility.Value then return end
		
		self.Character.Humanoid.Health = 0
	end)
end

function hitbox:Destroy()
	for _,con in pairs(self._Connections) do con:Disconnect() end
	self.Hitbox:Destroy()
	table.clear(self._Connections)
	hitbox.Characters[self.Character] = nil
	table.clear(self)
end

return hitbox
