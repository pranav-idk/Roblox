local teleport = {
	Players = {},
}

local playersService = game:GetService("Players")
local serverStorage = game:GetService("ServerStorage")
local aeKick = require(serverStorage.Modules.AEKick)
local ping = require(serverStorage.Modules.Ping).Players

function teleport.new(player)
	local self = setmetatable({
		Player = player,
		Character = player.Character or player.CharacterAdded:Wait(),
		Position = nil,
		ForgivableXZ = 4,
		ForgivableY = 4,
		Warnings = 0,
		MaxWarnings = 3,
	}, { __index = teleport })
	
	task.defer(function()
		while true do
			if not player or not player:IsDescendantOf(game) then return end
			
			local char = self.Character
			if not char or not char:IsDescendantOf(game) then wait() continue end
			
			local hrp = char:FindFirstChild("HumanoidRootPart")
			if not hrp or not char:FindFirstChild("Humanoid") or char.Humanoid.Health <= 0 then wait() continue end
			
			self:Check()
			wait(1)
		end
	end)
	
	return self
end

function teleport:Teleport(cf)
	local method = typeof(cf) == "Vector3" and self.Character.MoveTo or typeof(cf) == "CFrame" and self.Character.SetPrimaryPartCFrame
	if not method then return end
	
	local success, err = pcall(method, self.Character, cf)

	if success then
		self.Position = nil
		return true

	else return err end
end

function teleport:Check()
	local legal = true
	local hrp = self.Character.HumanoidRootPart
	
	self.Position = self.Position or hrp.Position

	local np, sp = hrp.Position, self.Position
	local npXZ, spXZ = Vector3.new(np.X, 0, np.Z), Vector3.new(sp.X, 0, sp.Z)

	local ws = 16
	ws += self.ForgivableXZ

	local jp = 50
	local jh = jp ^ 2 / 2 / workspace.Gravity
	jh += self.ForgivableY

	local avgPing = ping[self.Player] and ping[self.Player].Average or 0

	if (npXZ - spXZ).magnitude > math.ceil(avgPing / 2) * ws or np.Y - sp.Y > jh then
		legal = nil
		self.Warnings += 1
		self:Teleport(CFrame.new(sp))
	end

	if self.Warnings >= self.MaxWarnings then
		aeKick{ Player = self.Player, Exploit = self.Warnings .. " teleport attempts logged" }
		return self:Destroy()
	end

	self.Position = hrp.Position
	return legal
end

function teleport:Destroy()
	if teleport.Players[self.Player] then teleport.Players[self.Player] = nil end
	table.clear(self)
	return nil
end

return teleport
