local ping = {
	Players = {},
}
ping.__index = ping

local serverStorage = game:GetService("ServerStorage")

local aeKick = require(serverStorage.Modules.AEKick)
local signal = require(serverStorage.Modules.Signal)
local pingLocal = script:FindFirstChildOfClass("LocalScript")

local function calculateAverage(saves)
	local sum = 0
	for _,s in ipairs(saves) do sum += s end
	return sum / #saves
end

function ping.new(player)
	local self = setmetatable({
		Player = player,
		Recent = 0,
		Average = 0,
		Lowest = math.huge,
		Highest = 0,
		AverageCount = 10,
		
		AverageChanged = signal.new("PingChanged"),
		
		_Saves = {}
	}, ping)
	
	task.defer(function()
		while true do
			if not player or not player:IsDescendantOf(game) then return end
			
			local cLocal = pingLocal:Clone()
			local pingEvent = cLocal.Ping
			
			local now, con = tick()
			con = pingEvent.OnServerEvent:Connect(function()
				self:Calculate(tick() - now)
				con:Disconnect()
				con = nil
			end)

			cLocal.Parent = player:FindFirstChild("PlayerGui") or player:WaitForChild("PlayerGui")
			
			wait(1)
		end
	end)
	
	return self
end

function ping:Calculate(latency)
	if not latency then return end
	self.AverageCount = tonumber(self.AverageCount) or 10
	self._Saves = typeof(self._Saves) == "table" and self._Saves[1] and self._Saves or {}
	
	if #self._Saves == self.AverageCount then table.remove(self._Saves, 1) end
	table.insert(self._Saves, latency)

	if self.Lowest > latency then self.Lowest = latency end
	if self.Highest < latency then self.Highest = latency end
	self.Last = latency
	
	local average = calculateAverage(self._Saves)
	if self.Average ~= average then self.AverageChanged:Fire(average) end
	if average > self.AverageCount then 
		aeKick{ Player = self.Player, Exploit = "Ping exploit [possibility]" }
		return self:Destroy()
	end
	self.Average = average
end

function ping:Destroy()
	local player = self.Player
	if player and ping.Players[player] then
		self.AverageChanged:Destroy()
		table.clear(ping.Players[player])
		ping.Players[player] = nil
	end
end

return ping
